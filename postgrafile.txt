[[{low_code,security,API,integration.graphql,qa,01_PM.TODO]]]
# PostGraphile
* <https://www.graphile.org/postgraphile/>
* <https://www.youtube.com/watch?v=eDZO8z1qw3k>
  ```
  PSQL   ←····  PostGraphile ····→ GraphQL
  Server           Server          API Server
                   (NodeJS)        auto-generated
                                   from Schema
  ```
* Support for JWT and PSQL ROLE-bases/Row-level access control.
* Generates optimized SQL from GraphQL queries.
  generating 1 query when REST will ussally generate "N+1"
* Auto-discovered relations e.g. userByAuthorId
* Export also Custom procedures and views as GraphQL.
* Automatic CRUD mutations e.g. updatePost
* Custom mutation procedures enabling complex changes to be exposed simply
* Real-time features powered by LISTEN/NOTIFY and/or logical decoding + WebSockets.
* Performace: (C&P FROM https://www.graphile.org/postgraphile/performance/):
  On (Digital Ocean) compute-optimised, 4 vCPU, 8GB of RAM, running dockerized
  versions of (P.Graphile,PSQL, benchmarking soft) result output was:
  ```
  | query tracks_media_first_20 {                  ←  SIPLE QUERY:
  |   allTracksList(first: 20) { trackId name }      *3250 req/second*
  | }
  |
  | query albums_tracks_genre_some {               ←  3-LEVEL QUERY
  |   allAlbumsList(condition: { artistId: 127 }) {  *1450 req/second*
  |     artistId title
  |     tracksByAlbumIdList {
  |       trackId name
  |       genreByGenreId { name }
  |     }
  |   }
  | }
  |
  | query prisma_deeplyNested {                       "heavy" query
  |   allAlbumsList(condition: { artistId: 127 }) {  *550 req/second         *
  |   · albumId title                                *maintaining sub-50ms   *
  |   · tracksByAlbumIdList {                        *95th percentile latency*
  |   ·   trackId name
  |   ·   genreByGenreId { name }                     ← 3level
  |   · }
  |   · artistByArtistId {                            ← Union
  |   ·   albumsByArtistIdList {
  |   ·     tracksByAlbumIdList {
  |   ·       mediaTypeByMediaTypeId { name }         ← 5 level
  |   ·       genreByGenreId { name }                 ← 5 level
  |   ·     }
  |   ·   }
  |   · }
  |   }
  | }
  ```

- PRE-REQUESITES: NodeJS.
- Install (NodeJS based)
$*$ npm install db-migrate    *  ← Optional. Schema control.
$*$ npm install db-migrate-pg *  ← PostgreSQL plugin for db-migrate.
$*"vim" database.json         *  ← db migrate configuration.
  {
   "dev" : {
    "driver": "pg",
    "host": "...",
    "database": "...",
    }
  }
$*$ npx db-migrate create \    * ← Create next files in migrations/sql/:
$*  create-schema --sql-file   *   %Y%m%d%H%M%S-create-schema-up.sql
                                   %Y%m%d%H%M%S-create-schema-down.sql
                                   %Y%m%d%H%M%S-create-schema.js

  $ vim ...sql                   ← Init SQL migration up/down

  ...-create-schema-up.sql        ...-create-schema-down.sql
  CREATE SCHEMA learn;            DROP SCHEMA learn;

$*$ npx db-migrate up          * ← Apply migration (or 'down' to "remove")

$*$ npx db-migrate create \    * ← creates migrations/sql/
$*    create-table-person      *

   ...-create-table-person-up.sql  ...-create-table-person-down.sql
   CREATE TABLE learn.person (     DROP TABLE learn.person;
   ...
   );
   COMMENT ON TABLE learn.person
     IS 'Lorem Ipsum ....'
   COMMENT ON COLUMN learn.person.id
     IS 'Prim. unique id...'
   COMMENT ON COLUMN ...
     IS '@omit create,update ↩         ← 1st Smart-tags on comments used to add
   Lorem Ipsum ...'                      info consumed by postgraphile. In this
                                         case it tells Posgraphile to avoid users
                                         being able to create/update column through
                                         generated GraphQL API.

$*$ npm install postgraphile \  * ← Install PostGraphile Server !!!
$*  @graphile-contrib/pg-simplify-inflector * ← Short generated names in API
$*                              *

$*$ vim launch_pggraphile.sh    * ← Launcher script with
  | npx postgraphile    \           http://...5000/graphql GraphQL API
  | -c postgres:// ...  \           http://...5000/graphiql Dev/test UI
  | --schema learn      \         ← Sync only with this schema (sort of
  |                                 visibility namespace inside PSQL)
  | --schema learn      \         ← Sync only with this schema (sort of
  | --append-plugins    \
  | @graphile-contrib/pg-simplify-inflector
  | --watch             \         ← Autorefresh GraphQL API on schema changes
  |                     \           (avoiding graphile server restart)
  | --enhance-graphiql  \         ← Shows all GraphQL queries and mutations in UI
  | --allow-explain     \         ← Show PSQL explain in Dev. (web) UI
  | --dynamic-json

     e.g.GraphQL query       e.g. RETURNED RESULT

     query PeopleQuery {     {
       allPeople {           · "data": {
         nodes {             ·   "people": {
           id                ·   · "nodes" : [
           firstName         ·   ·   { "id": 1, "...", ...},
           lastName          ·   ·   { "id": 2, "...", ...},
         }                   ·   ·   ...
       }                     ·   · ]
     }                       ·   }
                             · }
                             }
     (PeopleQuery, allPeople,
      id, firstName, lastName
      types autogenerated by
      pg-graphile
[[}]]


[[{low_code,security,API,integration.graphql,qa,01_PM.TODO]]
# graphjin
@[https://graphjin.com/]
@[https://github.com/dosco/graphjin]
* Similar to PostGraphile but written in Go.
* Fast query/update with simple GraphQL, including deeply nested queries and mutations.
* Realtime subscriptions to queries to get all related updates over websockets
* Database schema discovery. Works with Postgres and (distributed) Yugabyte DB.
* Out of the box support for infinite scroll, threaded comments, activity feed and
  other common app patterns
* Full-text search support for search and auto-complete.
* Authentication support: JWT,Firebase, Rails cookie, others, ..
* Automatic Persisted Queries to improve network performance.
* growing community.

[[}]]


